* {
  box-sizing: border-box;
}

h1 {
  font-size: 2rem;
  margin: 1rem;
}

h2 {
  font-weight: bold;
}

section {
  border: 15px solid red;
  width: 80%;
  margin: 5rem auto 0 auto;
  height: 40rem;
  position: static;
  /* The element is positioned according to the normal flow of the document. The top, right, bottom, left, and z-index properties have no effect. This is the default value. */
}

article {
  border: medium solid black;
  margin: 1rem;
  /* notice with the margin the gap between articles is only 1rem not 2rem*/
  padding: 1rem;
}

#one {
  width: 20%;
  background-color: linen;
  position: relative;
  left: 100px;
  /* The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were static.

  This value creates a new stacking context when the value of z-index is not auto. Its effect on table-*-group, table-row, table-column, table-cell, and table-caption elements is undefined. */
}

#two {
  width: 50%;
  background-color: lavenderblush;
  position: absolute;
  top: 4rem;
  /* The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of top, right, bottom, and left.

  This value creates a new stacking context when the value of z-index is not auto. The margins of absolutely positioned boxes do not collapse with other margins. */
}

#three {
  width: 50%;
  margin: 0;
  background-color: beige;
  position: fixed;
  left: 0;
  bottom: 100px;
  /* transform: translateX(100%); */
  /* The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to the initial containing block established by the viewport, except when one of its ancestors has a transform, perspective, or filter property set to something other than none (see the CSS Transforms Spec), or the will-change property is set to transform, in which case that ancestor behaves as the containing block. (Note that there are browser inconsistencies with perspective and filter contributing to containing block formation.) Its final position is determined by the values of top, right, bottom, and left.

  This value always creates a new stacking context. In printed documents, the element is placed in the same position on every page. */
}

#four {
  margin: 0;
  background-color: lightcyan;
  position: absolute;
  bottom: 0;
}

footer {
  width: 100%;
  height: 2rem;
  background-color: darkcyan;
  margin: 20rem 0;
  position: sticky;
  bottom: 0;
  /* 
  A stickily positioned element is an element whose computed position value is sticky. It's treated as relatively positioned until its containing block crosses a specified threshold (such as setting top to value other than auto) within its flow root (or the container it scrolls within), at which point it is treated as "stuck" until meeting the opposite edge of its containing block.
  */
}

.master {
  width: 300px;
  height: 200px;
  background-color: teal;
  margin: 2rem auto;
  position: relative;
}

.overlay {
  width: 100%;
  height: 0;
  background-color: tomato;
  position: absolute;
  overflow-x: hidden;
  top: 100%;
  bottom: 0;
  left: 0;
  right: 0;
  transition: 0.5s ease;
  display: flex;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
}

.master:hover .overlay {
  height: 100%;
  top: 0;
}
